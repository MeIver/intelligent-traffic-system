name: Traffic API Documentation Generation

on:
  # Schedule: Run daily at 02:00 UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate all documentation'
        required: false
        default: 'false'
        type: boolean
  
  # Trigger on PR events related to API changes
  pull_request:
    paths:
      - 'openapi/**'
      - 'scripts/traffic-api-docs-generator.py'
      - 'docs/api/templates/**'
    branches: [main, develop]

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        # Install documentation generation tools
        npm install -g redoc-cli

    - name: Validate OpenAPI specification
      run: |
        python scripts/traffic-api-docs-generator.py \
          --openapi openapi/traffic-api.yaml \
          --validate

    - name: Generate documentation
      run: |
        # Create output directory
        mkdir -p generated-docs
        
        # Generate all documentation formats
        python scripts/traffic-api-docs-generator.py \
          --openapi openapi/traffic-api.yaml \
          --output generated-docs \
          --format all \
          --template docs/api/templates/traffic-api-template.md

    - name: Generate validation report
      run: |
        python scripts/traffic-api-docs-generator.py \
          --openapi openapi/traffic-api.yaml \
          --report generated-docs/validation-report.json

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: generated-docs/
        retention-days: 7

    - name: Deploy to GitHub Pages (if enabled)
      if: github.event_name == 'schedule' || github.event.inputs.force_regenerate == 'true'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./generated-docs
        keep_files: true

  validate-docs:
    runs-on: ubuntu-latest
    needs: generate-docs
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: generated-docs

    - name: Validate documentation format
      run: |
        # Check if documentation files were generated
        if [ ! -f "generated-docs/api-documentation.md" ]; then
          echo "Error: Markdown documentation not generated"
          exit 1
        fi
        
        if [ ! -f "generated-docs/api-documentation.html" ]; then
          echo "Warning: HTML documentation not generated"
        fi
        
        if [ ! -f "generated-docs/validation-report.json" ]; then
          echo "Error: Validation report not generated"
          exit 1
        fi
        
        # Check documentation content
        if ! grep -q "Intelligent Traffic System" generated-docs/api-documentation.md; then
          echo "Error: Documentation missing required content"
          exit 1
        fi
        
        echo "‚úì Documentation validation passed"

    - name: Run documentation tests
      run: |
        # Run any documentation-specific tests
        python scripts/test-docs-generator.py

  report-generation:
    runs-on: ubuntu-latest
    needs: [generate-docs, validate-docs]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: generated-docs

    - name: Create generation report
      run: |
        # Parse validation report
        REPORT=$(cat generated-docs/validation-report.json)
        VALIDATION_ERRORS=$(echo "$REPORT" | jq -r '.validation_errors | length')
        ENDPOINT_COUNT=$(echo "$REPORT" | jq -r '.endpoint_count')
        IS_VALID=$(echo "$REPORT" | jq -r '.is_valid')
        
        # Create summary
        echo "## API Documentation Generation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **OpenAPI File:** openapi/traffic-api.yaml" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation Status:** $(if [ "$IS_VALID" = "true" ]; then echo '‚úÖ PASSED'; else echo '‚ùå FAILED'; fi)" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation Errors:** $VALIDATION_ERRORS" >> $GITHUB_STep_SUMMARY
        echo "- **Endpoints Documented:** $ENDPOINT_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Generated Formats:** Markdown, HTML, PDF" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "$VALIDATION_ERRORS" -gt 0 ]; then
          echo "### Validation Errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$REPORT" | jq -r '.validation_errors[]' | while read error; do
            echo "- ‚ùå $error" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Generated Files" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- üìÑ [Markdown Documentation](generated-docs/api-documentation.md)" >> $GITHUB_STEP_SUMMARY
        echo "- üåê [HTML Documentation](generated-docs/api-documentation.html)" >> $GITHUB_STEP_SUMMARY
        echo "- üìã [Validation Report](generated-docs/validation-report.json)" >> $GITHUB_STEP_SUMMARY

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: generated-docs/validation-report.json
        retention-days: 30

  notify-completion:
    runs-on: ubuntu-latest
    needs: report-generation
    if: always()
    
    steps:
    - name: Check workflow status
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "WORKFLOW_STATUS=success" >> $GITHUB_ENV
        else
          echo "WORKFLOW_STATUS=failure" >> $GITHUB_ENV
        fi

    - name: Send notification on failure
      if: env.WORKFLOW_STATUS == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "‚ùå API documentation generation failed. Please check the workflow logs for details."
          })

    - name: Send notification on success for scheduled runs
      if: env.WORKFLOW_STATUS == 'success' && github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "‚úÖ API documentation successfully generated and validated. Generated files are available as workflow artifacts."
          })