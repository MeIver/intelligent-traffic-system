name: Traffic API Documentation Automation

on:
  # Schedule: Run daily at 02:00 UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Trigger on pull requests that modify API-related files
  pull_request:
    paths:
      - 'openapi/**'
      - 'docs/api/templates/**'
      - 'scripts/traffic-api-docs-generator.py'
      - '.github/workflows/traffic-api-docs.yml'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      validate_only:
        description: 'Only validate without generating docs'
        required: false
        default: 'false'
        type: boolean

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
        # Install documentation generation tools
        npm install -g redoc-cli

    - name: Create generated docs directory
      run: mkdir -p docs/api/generated

    - name: Generate API documentation
      run: |
        python scripts/traffic-api-docs-generator.py \
          --openapi openapi/traffic-api.yaml \
          --output docs/api/generated \
          --format all
      env:
        # Add any required environment variables here
        NODE_OPTIONS: "--max_old_space_size=4096"

    - name: Validate OpenAPI specification
      run: |
        python scripts/traffic-api-docs-generator.py \
          --openapi openapi/traffic-api.yaml \
          --validate-only

    - name: Check for documentation changes
      id: docs-changes
      run: |
        # Check if generated documentation has changed
        if git diff --name-only --exit-code docs/api/generated/; then
          echo "No documentation changes detected"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Documentation changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Upload generated documentation
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: docs/api/generated/
        retention-days: 7

    - name: Upload validation report
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: docs/api/generated/validation-report.md
        retention-days: 7

    - name: Commit and push documentation updates (on schedule)
      if: github.event_name == 'schedule' && steps.docs-changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/api/generated/
        git commit -m "docs: auto-update API documentation [skip ci]"
        git push origin HEAD:${{ github.ref }}

    - name: Create PR comment with validation results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const reportPath = 'docs/api/generated/validation-report.md';
          
          if (fs.existsSync(reportPath)) {
            const report = fs.readFileSync(reportPath, 'utf8');
            
            // Extract summary for PR comment
            const summaryMatch = report.match(/## Summary[\s\S]*?(?=##|$)/);
            const errorsMatch = report.match(/## Errors[\s\S]*?(?=##|$)/);
            const warningsMatch = report.match(/## Warnings[\s\S]*?(?=##|$)/);
            
            let comment = '## üìã API Documentation Validation Report\n\n';
            
            if (summaryMatch) {
              comment += summaryMatch[0] + '\n';
            }
            
            if (errorsMatch) {
              comment += '### ‚ùå Validation Errors\n';
              comment += errorsMatch[0].replace('## Errors', '') + '\n';
            }
            
            if (warningsMatch) {
              comment += '### ‚ö†Ô∏è Validation Warnings\n';
              comment += warningsMatch[0].replace('## Warnings', '') + '\n';
            }
            
            if (!errorsMatch && !warningsMatch) {
              comment += '‚úÖ All validations passed successfully!\n';
            }
            
            comment += '\n---\n*Generated by Traffic API Documentation Automation*';
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: Fail on validation errors
      if: failure()
      run: |
        echo "‚ùå Documentation generation failed. Check the validation report for details."
        exit 1

  quality-check:
    runs-on: ubuntu-latest
    needs: generate-docs
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download generated documentation
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: docs/api/generated/

    - name: Run documentation quality checks
      run: |
        # Check if generated files exist and are valid
        if [ ! -f "docs/api/generated/traffic-api-documentation.md" ]; then
          echo "‚ùå Generated Markdown documentation not found"
          exit 1
        fi
        
        if [ ! -f "docs/api/generated/validation-report.md" ]; then
          echo "‚ùå Validation report not found"
          exit 1
        fi
        
        # Basic content validation
        if ! grep -q "Intelligent Traffic System" docs/api/generated/traffic-api-documentation.md; then
          echo "‚ùå Generated documentation missing expected content"
          exit 1
        fi
        
        echo "‚úÖ Documentation quality checks passed"

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [generate-docs, quality-check]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download generated documentation
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: docs/api/generated/

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/api/generated/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Comment PR with preview link
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `üåê **Documentation Preview Available**\n\nView the generated API documentation: ${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/deployments/${context.payload.deployment.statuses_url}?environment=github-pages`
          });

  notify:
    runs-on: ubuntu-latest
    needs: [generate-docs, quality-check]
    if: always()
    
    steps:
    - name: Download validation report
      uses: actions/download-artifact@v4
      with:
        name: validation-report
        path: ./

    - name: Send notification on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('validation-report.md')) {
            const report = fs.readFileSync('validation-report.md', 'utf8');
            
            // Send notification to relevant teams
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® API Documentation Generation Failed',
              body: `API documentation generation failed for ${context.sha}.\n\n**Validation Report:**\n\n\`\`\`\n${report}\n\`\`\``,
              labels: ['documentation', 'bug']
            });
          }